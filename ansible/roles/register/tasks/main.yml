---
- name: Install infoblox python module
  pip:
    state: present
    name:
      - infoblox-client

- name: fetch all networkview objects
  set_fact:
    zones: "{{ lookup('nios', 'view', provider={'host': infoblox_host, 'username': infoblox_username, 'password': infoblox_password}) }}"

- name: check the networkviews
  debug:
    var: zones

# - name: Configure a default network view
#   nios_network_view:
#     name: default
#     state: present
#     provider:
#       host: "{{ infoblox_host }}"
#       username: "{{ infoblox_username }}"
#       password: "{{ infoblox_password }}"

- name: Register host to DNS
  nios_a_record:
    state: present
    name: "hgi-dev-{{ deployment_name }}-{{ role_name }}-{{ count }}.hgi.sanger.ac.uk"
    ipv4: "{{ ansible_facts['default_ipv4']['address'] }}"
    comment: "{{ datacentre }}-{{ os_release }}-{{ programme }}-{{ env }}-instance-{{ deployment_name }}-{{ role_name }}-{{ count }}"
    ttl: 600
    provider:
      host: "{{  infoblox_host  }}"
      username: "{{ infoblox_username }}"
      password: "{{ infoblox_password }}"
    view: internal

- name: Ensure script installation directory exist
  file:
    state: directory
    path: "{{ register_install_dir }}"

- name: Install DNS record update script
  template:
    src: infoblox_update.j2
    est: "{{ register_install_dir }}/infoblox_update"
    owner: "{{ register_install_owner }}"
    group: "{{ register_install_group }}"
    mode: +x

- name: Create DNS record update cron job
  cron:
    name: Update DNS record every 5 minutest
    state: present
    minute: '*/5'
    job: "{{ register_install_dir }}/infoblox_update"
