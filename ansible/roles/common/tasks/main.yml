---
- name: Ensure spark-master address is set in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ spark_master_private_address | default('127.0.0.1', true) }} spark-master"

- name: Configure Collectd
  template:
    src: collectd.conf.j2
    dest: /etc/collectd/collectd.conf
  notify:
    - Restart Collectd

- name: Configure RsyslogD
  template:
    src: rsyslog.conf.j2
    dest: /etc/rsyslog.conf
  notify:
    - Restart RsyslogD

- name: Create LUKS keyfile
  copy:
    dest: "{{ base_user_home }}/password"
    content: "{{ password }}"
    mode: "0600"

- name: Ensure LVM volume group is created on extra volumes
  lvg:
    state: present
    force: no
    pesize: "4"
    vg: "{{ volume['vg'] }}"
    pvs: "{{ volume['device'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume

- name: Ensure LVM logical volume is created on extra volumes
  lvol:
    vg: "{{ volume['vg'] }}"
    lv: "{{ volume['lv'] }}"
    pvs: "{{ volume['device'] }}"
    size: +100%PVS
    resizefs: yes
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume

- name: Ensure LUKS container is configured on extra volumes
  luks_device:
    state: "{{ volume['luks_state'] }}"
    device: "/dev/mapper/{{ volume['vg'] }}-{{ volume['lv'] }}"
    name: "{{ volume['luks_name'] }}"
    keyfile: "{{ base_user_home }}/password"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume

- name: Ensure LUKS containers are configured in crypttab
  crypttab:
    state: present
    name: "{{ volume['luks_name'] }}"
    password: "{{ base_user_home }}/password"
    backing_device: "/dev/mapper/{{ volume['vg'] }}-{{ volume['lv'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
  when: volume['luks_state'] == 'present'

- name: Let SystemD create new services based on the new entries in crypttab
  systemd:
    daemon_reload: yes

- name: Ensure SystemD services handles LUKS containers
  service:
    name: "systemd-cryptsetup@{{ volume['luks_name'] }}"
    enabled: yes
    state: started
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
  when: volume['luks_state'] == 'present'

- name: Ensure that a filesystem exists on extra volumes
  filesystem:
    dev: "{{ volume['filesystem_dev'] }}"
    force: yes
    type: "{{ volume['filesystem_type'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume

- name: Mount extra volumes
  mount:
    state: mounted
    src: "{{ volume['filesystem_dev'] }}"
    fstype: "{{ volume['filesystem_type'] }}"
    path: "{{ volume['mount_path'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
