---
- name: Ensure spark-master address is set in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ spark_master_private_address | default('127.0.0.1', true) }} spark-master"

- name: Configure Collectd
  template:
    src: collectd.conf.j2
    dest: /etc/collectd/collectd.conf
  notify:
    - Restart Collectd

- name: Configure RsyslogD
  template:
    src: rsyslog.conf.j2
    dest: /etc/rsyslog.conf
  notify:
    - Restart RsyslogD

- name: Create LUKS keyfile
  copy:
    dest: password
    content: "{{ password }}"
    mode: "0600"

- name: Check if volume has been partitioned
  parted:
    state: info
    device: "{{ volume['device'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
  register: parted_info
  
- name: Ensure that a primary partition exists on extra volumes
  parted:
    state: present
    device: "{{ volume['device'] }}"
    label: gpt
    name: "{{ volume['name'] }}"
    part_type: primary
    number: 1
  loop: "{{ volumes }}"
  loop_control:
    extended: yes
    loop_var: volume
  when: parted_info.results[ansible_loop.index0].rc != 0

- name: Check if partition has been formatted
  shell: "blkid --output value {{ volume['device'] }}1 | sed '2q;d'"
  register: blkid_info

- name: Ensure LUKS container is configured on extra volumes
  luks_device:
    state: "{{ volume['luks_state'] }}"
    device: "{{ volume['device'] }}1"
    name: "{{ volume['name'] }}"
    keyfile: "password"
  loop: "{{ volumes }}"
  loop_control:
    extended: yes
    loop_var: volume
  when: blkid_info.results[ansible_loop.index0].stdout == ""

- name: Ensure that a filesystem exists on extra volumes
  filesystem:
    dev: "{{ volume['filesystem_dev'] }}"
    force: yes
    fstype: "{{ volume['fstype'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
    extended: yes
  when: blkid_info.results[ansible_loop.index0].stdout == ""

- name: Mount extra volumes
  mount:
    state: mounted
    src: "{{ volume['filesystem_dev'] }}"
    path: "{{ volume['path'] }}"
    fstype: "{{ volume['fstype'] }}"
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
